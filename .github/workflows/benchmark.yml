name: Benchmarking
on:
  workflow_dispatch:
  push:
    branches: ["gpu-bench-fixes"]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  #benchmark:
  #  name: Continuous benchmarking
  #  runs-on: gpu-bench-a6000
  #  env:
  #    NVIDIA_VISIBLE_DEVICES: all
  #    NVIDIA_DRIVER_CAPABILITITES: compute,utility
  #    EC_GPU_FRAMEWORK: cuda
  #  steps:
  #    # GPU setup
  #    # Check we have access to the machine's Nvidia drivers
  #    - run: nvidia-smi
  #    # The `compute`/`sm` number corresponds to the Nvidia GPU architecture
  #    # In this case, the self-hosted machine uses the Ampere architecture, but we want this to be configurable
  #    # See https://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards/
  #    - name: Set env for CUDA compute
  #      run: echo "CUDA_ARCH=$(nvidia-smi --query-gpu=compute_cap --format=csv,noheader | sed 's/\.//g')" >> $GITHUB_ENV
  #    - name: set env for EC_GPU
  #      run: echo 'EC_GPU_CUDA_NVCC_ARGS=--fatbin --gpu-architecture=sm_${{ env.CUDA_ARCH }} --generate-code=arch=compute_${{ env.CUDA_ARCH }},code=sm_${{ env.CUDA_ARCH }}' >> $GITHUB_ENV
  #    - run: echo "${{ env.EC_GPU_CUDA_NVCC_ARGS}}"
  #    # Check that CUDA is installed with a driver-compatible version
  #    # This must also be compatible with the GPU architecture, see above link
  #    - run: nvcc --version

      # Job steps
      #- id: check-branch-exists
      #  uses: GuillaumeFalourd/branch-exists@v1
      #  with:
      #    branch: gh-pages
      #- name: Get old benchmarks
      #  if: steps.check-branch-exists.outputs.exists == 'true'
      #  uses: actions/checkout@v4
      #  with:
      #    ref: gh-pages
      #    path: gh-pages
      #- run: mkdir -p target; cp -r gh-pages/benchmarks/criterion target;
      #- name: Install criterion
      #  run: cargo install cargo-criterion
      #- name: Run benchmarks
      #  run: cargo criterion --bench fibonacci --message-format=json > ${{ github.sha }}.json
      #- name: Deploy latest benchmark report
      #  uses: peaceiris/actions-gh-pages@v3
      #  with:
      #    github_token: ${{ secrets.GITHUB_TOKEN }}
      #    publish_dir: ./target/criterion
      #    destination_dir: benchmarks/criterion
      #- name: Move benchmark json to history
      #  run: mkdir history; cp ${{ github.sha }}.json history/
      #- name: Deploy benchmark history
      #  uses: peaceiris/actions-gh-pages@v3
      #  with:
      #    github_token: ${{ secrets.GITHUB_TOKEN }}
      #    publish_dir: history/
      #    destination_dir: benchmarks/history
      #    keep_files: true
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2